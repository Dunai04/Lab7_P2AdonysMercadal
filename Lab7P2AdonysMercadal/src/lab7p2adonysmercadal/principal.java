package lab7p2adonysmercadal;

import java.io.File;
import java.io.FileNotFoundException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author adony
 */
public class principal extends javax.swing.JFrame {

    /**
     * Creates new form principal
     */
    public principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jtext_cmd = new javax.swing.JTextField();
        Jbutton_enter = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        arbol = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        newFile = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        Importar = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        limpiarlinea = new javax.swing.JMenuItem();
        limpiartabla = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        estructurapro = new javax.swing.JMenuItem();
        comandos = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");
        jPopupMenu1.add(jMenuItem2);

        jMenuItem3.setText("jMenuItem3");
        jPopupMenu1.add(jMenuItem3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jtext_cmd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtext_cmdActionPerformed(evt);
            }
        });
        jPanel1.add(jtext_cmd, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 850, 35));

        Jbutton_enter.setText("Enter");
        Jbutton_enter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Jbutton_enterMouseClicked(evt);
            }
        });
        jPanel1.add(Jbutton_enter, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 30, 110, -1));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("CSVs");
        arbol.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(arbol);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 82, 260, 510));

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "id", "name", "category", "price", "aisle", "bin"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Tabla);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 80, 700, 510));

        newFile.setText("File");

        jMenuItem1.setText("New File");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        newFile.add(jMenuItem1);

        Importar.setText("Import File");
        Importar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportarActionPerformed(evt);
            }
        });
        newFile.add(Importar);

        jMenuBar1.add(newFile);

        jMenu2.setText("Windows");

        jMenu4.setText("Clear");

        limpiarlinea.setText("Clear Command Line");
        limpiarlinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarlineaActionPerformed(evt);
            }
        });
        jMenu4.add(limpiarlinea);

        limpiartabla.setText("Clear Table");
        limpiartabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiartablaActionPerformed(evt);
            }
        });
        jMenu4.add(limpiartabla);

        jMenu2.add(jMenu4);

        jMenuItem4.setText("Refresh Tree");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        estructurapro.setText("Product Structure");
        estructurapro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estructuraproActionPerformed(evt);
            }
        });
        jMenu3.add(estructurapro);

        comandos.setText("Commands");
        comandos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comandosActionPerformed(evt);
            }
        });
        jMenu3.add(comandos);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1022, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtext_cmdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtext_cmdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtext_cmdActionPerformed

    private void Jbutton_enterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Jbutton_enterMouseClicked
        String comando = jtext_cmd.getText();
        if (comando.startsWith("./load ")) {
            String[] partes = comando.split(" ");
            String nombreArchivo = partes[1];
            cargarTablaPrinci(nombreArchivo);
            if (!nombreArchivo.contains(".txt")) {
                nombreArchivo = nombreArchivo + ".txt";
                cargarTablaPrinci(nombreArchivo);
            }

        } else if (comando.startsWith("./create") && comando.endsWith("-single")) {
            String[] partes = comando.split(" ");
            String nombreArchivo = partes[1];
            if (!nombreArchivo.contains(".txt")) {
                nombreArchivo = nombreArchivo + ".txt";
            }

        } else if (comando.equals("./clear")) {
            limpiarTabla();
        } else if (comando.equals("./refresh")) {
            refreshArbol();
        } else {
            JOptionPane.showMessageDialog(rootPane, "El comando no existe");
            jtext_cmd.setText(" ");
        }

    }//GEN-LAST:event_Jbutton_enterMouseClicked

    private void limpiarlineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarlineaActionPerformed
        jtext_cmd.setText(" ");
    }//GEN-LAST:event_limpiarlineaActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String nombreArchivoNuevo = JOptionPane.showInputDialog(rootPane, "Ingrese el nombre del nuevo archivo ");
        if (!nombreArchivoNuevo.contains(".txt")) {
            nombreArchivoNuevo = nombreArchivoNuevo + ".txt";
        }
        nombreArchivoNuevo = nombreArchivoNuevo + ".txt";
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void ImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportarActionPerformed
        String nombreArchivo = JOptionPane.showInputDialog(rootPane, "Ingrese el nombre del nuevo archivo ");
        cargarTablaPrinci(nombreArchivo);
        if (!nombreArchivo.contains(".txt")) {
            nombreArchivo = nombreArchivo + ".txt";
            cargarTablaPrinci(nombreArchivo);
        }


    }//GEN-LAST:event_ImportarActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        refreshArbol();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void limpiartablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiartablaActionPerformed
        limpiarTabla();
    }//GEN-LAST:event_limpiartablaActionPerformed

    private void comandosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comandosActionPerformed
        JOptionPane.showMessageDialog(rootPane, "Cargar la tabla:\n"
                + "Inicia el programa con una tabla vacía.\n"
                + "Carga el archivo deseado en la tabla para usar otras funciones.\n"
                + "Comando: ./load data.txt\n"
                + "Crear archivos:\n"
                + "Ingresa los productos deseados en la tabla.\n"
                + "Sigue el formato y crea tus propios archivos similares a data.txt.\n"
                + "Especifica el nombre en la línea de comando.\n"
                + "Comando: ./create archivo.txt -single\n"
                + "Limpiar la tabla:\n"
                + "Vacía todos los datos actuales de la tabla en pantalla.\n"
                + "Comando: ./clear\n"
                + "Cargar los árboles:\n"
                + "Refresca los árboles del programa que muestran archivos de texto separados por comas y archivos de texto con formato JSON.\n"
                + "Comando: ./refresh");
    }//GEN-LAST:event_comandosActionPerformed

    private void estructuraproActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estructuraproActionPerformed
        JOptionPane.showMessageDialog(rootPane, "ID:\n"
                + "Es un número entero que identifica el producto.\n"
                + "Nombre:\n"
                + "Representa el nombre del producto.\n"
                + "Puede contener espacios.\n"
                + "Categoría:\n"
                + "Es un valor entero del 0 al 9.\n"
                + "Indica la categoría del producto.\n"
                + "Precio:\n"
                + "Es un número real con dos posiciones decimales.\n"
                + "Representa el precio del producto.\n"
                + "Pasillo:\n"
                + "Es un número entero de 3 posiciones.\n"
                + "Indica el lugar donde se guarda el producto.\n"
                + "Bin:\n"
                + "Es un número entero de 3 posiciones.\n"
                + "Indica el lugar exacto dentro del pasillo donde se almacena el producto.");
    }//GEN-LAST:event_estructuraproActionPerformed
    public void limpiarTabla() {
        DefaultTableModel model = (DefaultTableModel) Tabla.getModel();
        model.setRowCount(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new principal().setVisible(true);
            }
        });
    }

    public void refreshArbol() {
        String directorioRaiz = "../Lab7P2AdonysMercadal";
        DefaultMutableTreeNode nodoRaiz = (DefaultMutableTreeNode) arbol.getModel().getRoot();
        nodoRaiz.removeAllChildren();
        cargarArchivosTxt(directorioRaiz, nodoRaiz);
        ((DefaultTreeModel) arbol.getModel()).reload();
    }

    public static void cargarArchivosTxt(String directorio, DefaultMutableTreeNode nodoPadre) {
        File dir = new File(directorio);
        File[] archivos = dir.listFiles();
        if (archivos != null) {
            for (File archivo : archivos) {
                if (archivo.isFile() && archivo.getName().endsWith(".txt")) {
                    nodoPadre.add(new DefaultMutableTreeNode(archivo.getName()));
                }
            }
        }
    }

    public void cargarTablaPrinci(String rutaarchivo) {
        DefaultTableModel model = (DefaultTableModel) Tabla.getModel();
        productoadmin prodadmin = new productoadmin(rutaarchivo);
        try {
            model = prodadmin.cargarTabla(model);
            Tabla.setModel(model);
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalStateException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Importar;
    private javax.swing.JButton Jbutton_enter;
    private javax.swing.JTable Tabla;
    private javax.swing.JTree arbol;
    private javax.swing.JMenuItem comandos;
    private javax.swing.JMenuItem estructurapro;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jtext_cmd;
    private javax.swing.JMenuItem limpiarlinea;
    private javax.swing.JMenuItem limpiartabla;
    private javax.swing.JMenu newFile;
    // End of variables declaration//GEN-END:variables
}
